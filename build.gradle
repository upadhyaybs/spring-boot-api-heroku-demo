/*
 * This file was generated by the Gradle 'init' task.
 */

buildscript {
	repositories {
		maven { url 'https://repo.spring.io/milestone' }
		mavenCentral()
	}
	dependencies {
		classpath('org.springframework.boot:spring-boot-gradle-plugin:2.3.1.RELEASE')
		classpath('com.google.cloud.tools.jib:com.google.cloud.tools.jib.gradle.plugin:1.8.0')
	}
}

plugins {
	id 'org.springframework.boot' version '2.7.2'
	id 'io.spring.dependency-management' version '1.0.12.RELEASE'
	id 'java'
	id 'jacoco'
	id "org.owasp.dependencycheck" version "5.3.2.1"
	id 'com.google.cloud.tools.jib' version '1.8.0'
}

group = 'com.codify'
version = '0.0.1-SNAPSHOT'
description = 'spring-boot-api-heroku-demo'
sourceCompatibility = '1.8'

apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"
apply plugin: "java"
apply plugin: "jacoco"

apply plugin: "org.owasp.dependencycheck"
apply plugin: 'com.google.cloud.tools.jib'

repositories {
	mavenCentral()
	mavenLocal()
	maven {
		url "https://plugins.gradle.org/m2/"
	}
}

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-logging'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	testImplementation('org.springframework.boot:spring-boot-starter-test'){
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation group: 'com.intuit.karate', name: 'karate-mock-servlet', version: '1.2.1.RC2'
	testImplementation group: 'com.intuit.karate', name: 'karate-junit5', version: '1.2.1.RC2'
	testImplementation group: 'com.intuit.karate', name: 'karate-apache', version: '0.9.6'
	testImplementation 'net.masterthought:cucumber-reporting:5.7.2'
}

tasks.named("bootJar"){
	enabled=true
	archiveClassifier=''
	duplicatesStrategy=DuplicatesStrategy.EXCLUDE
}

tasks.named("jar"){
	enabled=false
	archiveClassifier=''
	duplicatesStrategy=DuplicatesStrategy.EXCLUDE
}

sourceSets {
	test {
		java {
			srcDir file('src/test/java')
			//exclude '**/*Runner*.java'
		}
		resources {
			srcDir file('src/test/java')
			exclude '**/*.java'
		}
	}
}

test{
	useJUnitPlatform()
	testLogging {
		showStandardStreams = true
	}
	finalizedBy jacocoTestReport
}

jacoco {
	toolVersion = "0.8.8"
	reportsDirectory = layout.buildDirectory.dir("$buildDir/jacoco")
}

jacocoTestReport {
	dependsOn test
	reports {
		xml{
			required = true
		}
		html{
			required = true
		}
		html.outputLocation = layout.buildDirectory.dir('reports/jacoco')
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.5
			}
		}

		rule {
			enabled = false
			element = 'CLASS'
			includes = ['com.codify.*']

			limit {
				counter = 'LINE'
				value = 'TOTALCOUNT'
				maximum = 0.3
			}
		}
	}
}