# Java Gradle CircleCI 2.0 configuration file
# See: https://circleci.com/docs/2.0/language-java/
version: 2

orbs:
  heroku: circleci/heroku@1.2.6

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  stage:
    executor: heroku/default
    steps:
      - checkout
      #- heroku/install
      - heroku/deploy-via-git:
          app-name: $HEROKU_STAGING_APP_NAME
  test:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8-jdk

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: gradle dependencies

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}
      # run build!
      - run: 
          name: Run Gradle Build
          command: |
            gradle clean build --tests "com.codify.demo*"
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/build/test-results/test/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - run: 
          name: Check Code Coverage and Generate Report
          command: |
            gradle jacocoTestReport
      - store_artifacts:
          path: build/reports/jacoco
      - run: 
          name: Run Automation API Tests and Generate Report
          command: |
            gradle test --tests "karate*"
      - store_artifacts:
          path: build/reports/karate-reports 

  deploy:
      executor: heroku/default
      steps:
        - checkout
        - heroku/install
        - heroku/deploy-via-git:
            app-name: $HEROKU_PRODUCTION_APP_NAME

workflows:
  version: 2
  stage_test_deploy:
    jobs:
      - stage
      - test:
          requires:
            - stage
      - deploy:
          requires:
            - test